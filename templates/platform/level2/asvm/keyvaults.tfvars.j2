
keyvaults = {
  level3 = {
    name               = "{{ resources[tfstate].resources[subscription_key].keyvaults.level3.name }}"
    resource_group_key = "{{ resources[tfstate].resources[subscription_key].keyvaults.level3.resource_group_key }}"
    sku_name           = "{{ resources[tfstate].resources[subscription_key].keyvaults.level3.sku_name | default('standard') }}"
    tags = {
      caf_tfstate     = "level3"
      caf_environment = "{{ resources.caf_environment }}"
    }

    creation_policies = {
{% if resources.azure_landing_zones.identity.azuread_identity_mode != 'logged_in_user' and launchpad_azuread_groups is defined %}
      subscription_creation_landingzones = {
        object_id = "{{launchpad_azuread_groups.subscription_creation_landingzones.id}}"
        secret_permissions = ["Get"]
      }
      level0 = {
        object_id = "{{launchpad_azuread_groups.level0.id}}"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
      caf_platform_maintainers = {
        object_id  = "{{launchpad_azuread_groups.caf_platform_maintainers.id}}"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% endif %}
{% if resources.azure_landing_zones.identity.azuread_identity_mode == 'logged_in_user' %}
      logged_in_user = {
        # if the key is set to "logged_in_user" add the user running terraform in the keyvault policy
        # More examples in /examples/keyvault
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% endif %}
    }

  }

  level4 = {
    name               = "{{ resources[tfstate].resources[subscription_key].keyvaults.level4.name }}"
    resource_group_key = "{{ resources[tfstate].resources[subscription_key].keyvaults.level4.resource_group_key }}"
    sku_name           = "{{ resources[tfstate].resources[subscription_key].keyvaults.level1.sku_name | default('standard') }}"
    tags = {
      caf_tfstate     = "level4"
      caf_environment = "{{ resources.caf_environment }}"
    }

    creation_policies = {
{% if resources.azure_landing_zones.identity.azuread_identity_mode != 'logged_in_user' %}
{% if launchpad_azuread_groups is defined %}
      subscription_creation_landingzones = {
        object_id = "{{launchpad_azuread_groups.subscription_creation_landingzones.id}}"
        secret_permissions = ["Get"]
      }
{% endif %}
      caf_ac_landingzone_maintainers_non_prod = {
        azuread_group_key  = "caf_ac_landingzone_maintainers_non_prod"
        secret_permissions = ["Get"]
      }
      caf_ac_landingzone_maintainers_prod = {
        azuread_group_key  = "caf_ac_landingzone_maintainers_prod"
        secret_permissions = ["Get"]
      }
{% if launchpad_azuread_groups is defined %}
      level0 = {
        object_id = "{{launchpad_azuread_groups.level0.id}}"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
      caf_platform_maintainers = {
        object_id  = "{{launchpad_azuread_groups.caf_platform_maintainers.id}}"
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% endif %}
{% endif %}
{% if resources.azure_landing_zones.identity.azuread_identity_mode == 'logged_in_user' %}
      logged_in_user = {
        # if the key is set to "logged_in_user" add the user running terraform in the keyvault policy
        # More examples in /examples/keyvault
        secret_permissions = ["Set", "Get", "List", "Delete", "Purge", "Recover"]
      }
{% endif %}
    }

  }

}
